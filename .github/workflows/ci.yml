#--------------------------------------------------------------------------------
# Workflow configuration
#--------------------------------------------------------------------------------

name: Build
on:
  push:               # Run on push
  pull_request:       # Run on pull-request

#--------------------------------------------------------------------------------
# Define application name & version
#--------------------------------------------------------------------------------

env:
  VERSION: "1.0.0"
  EXECUTABLE: "XO"
  APPLICATION: "XO "

#--------------------------------------------------------------------------------
# Workflow jobs (GNU/Linux, macOS & Windows)
#--------------------------------------------------------------------------------

jobs:
  #
  # GNU/Linux build (we run on Ubuntu 16.04 to generate AppImage)
  #
  build-linux:
    runs-on: ubuntu-20.04
    steps:
      #
      # Checkout the repository
      #
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      #
      # Install Qt
      #
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.7.0'
          
      #
      # Install additional dependencies, stolen from:
      # https://github.com/mapeditor/tiled/blob/master/.github/workflows/packages.yml
      #
      - name: Install dependencies
        run: |
             sudo apt-get update
             sudo apt-get install libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libzstd-dev
        
      #
      # Compile the application
      #
      - name: Configure with CMake
        run: |
             cmake -B build -DCMAKE_BUILD_TYPE=Release

      #
      # Debugging: List contents of the build directory after CMake configuration
      #
      - name: List build directory after CMake configuration
        run: ls -la build/CMakeFiles

      #
      # Debugging: Check for CMake logs
      #
      - name: Check for CMake logs
        run: |
             if [ -f build/CMakeFiles/CMakeError.log ]; then
               cat build/CMakeFiles/CMakeError.log
             fi

      #
      # Continue the build process
      #
      - name: Continue Build
        run: |
             cmake --build build -- -j8

      #
      # Debugging: List contents of the build directory after build
      #
      - name: List build directory after build
        run: ls -la build

      #
      # Debugging: Find the executable
      #
      - name: Find the executable
        run: find build -name ${EXECUTABLE}

      #
      # Create the AppImage
      #
      - name: Create AppImage
        run: | 
             mkdir -p appdir/usr/bin
             cp build/${{env.EXECUTABLE}} appdir/usr/bin/  # Adjust this line if the executable name or location is different
             wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage" -O linuxdeployqt
             chmod a+x linuxdeployqt
             ./linuxdeployqt appdir/usr/bin/${{env.EXECUTABLE}} -appimage -bundle-non-qt-libs
     
      #
      # Rename AppImage to match "%AppName%-%Version%-Linux.AppImage" format
      #
      - name: Rename AppImage
        run: mv *.AppImage ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage
        
      #
      # Upload AppImage to build artifacts
      #
      - name: Upload AppImage
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage
          path: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage
             
  
          
  #
  # Windows build
  #
  build-windows:
    runs-on: windows-latest
    steps:
      #
      # Checkout the repository
      #
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
      
      #
      # Configure MSVC
      #
      - name: Configure MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          spectre: true

      #
      # Install Qt
      #
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.7.0'
          
      #
      # Install NSIS
      #  
      - name: Install NSIS
        run: |
             Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
             scoop bucket add extras
             scoop install nsis
 
      #
      # Compile application
      #
      - name: Compile
        run: |
             cmake -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release
             cmake --build build
             
      #
      # Copy Qt DLLs, compiler runtime & application icon
      #       
      - name: Deploy
        run: |
             mkdir bin
             move build\${{env.EXECUTABLE}}.exe bin
             windeployqt bin\${{env.EXECUTABLE}}.exe --compiler-runtime
             mkdir "${{env.APPLICATION}}"
             move bin "${{env.APPLICATION}}"
             xcopy deploy\windows\resources\icon.ico "${{env.APPLICATION}}"
      
      #
      # Create NSIS installer
      #
      - name: Make NSIS installer
        run: |
             move "${{env.APPLICATION}}" deploy\windows\nsis\
             cd deploy\windows\nsis
             makensis /X"SetCompressor /FINAL lzma" setup.nsi
             ren *.exe ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe
             
      #
      # Upload installer to build artifacts
      #
      - name: Upload NSIS installer
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe
          path: deploy/windows/nsis/${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe
