#--------------------------------------------------------------------------------
# Workflow configuration
#--------------------------------------------------------------------------------

name: Build
on:
  push:               # Run on push to any branch
    branches:
      - main        # Change this to your main branch name if different
  pull_request:       # Run on pull-request

#--------------------------------------------------------------------------------
# Define application name & version
#--------------------------------------------------------------------------------

env:
  VERSION: "1.0.0"
  EXECUTABLE: "QtApp"  # Change this to your executable name
  APPLICATION: "Qt App"  # Change this to your application name
  CMAKE_PROJECT: "CMakeLists.txt"

#--------------------------------------------------------------------------------
# Workflow jobs (GNU/Linux, macOS & Windows)
#--------------------------------------------------------------------------------

jobs:
  #
  # GNU/Linux build (we run on Ubuntu 20.04)
  #
  build-linux:
    runs-on: ubuntu-18.04
    steps:
      #
      # Checkout the repository
      #
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      #
      # Set up Qt environment
      #
      - name: Set up Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '6.x'  # Adjust to the specific version of Qt6 you're using

      #
      # Install build essentials
      #
      - name: Install build essentials
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      #
      # Configure and build using CMake
      #
      - name: Configure and build
        run: |
          mkdir buildlinux
          cd buildlinux
          cmake -G "Ninja" -DCMAKE_PREFIX_PATH=$QTDIR/lib/cmake/Qt6 -DQt6_DIR=$QTDIR/lib/cmake/Qt6 ..
          cmake --build .

      #
      # Upload artifacts (adjust as per your project's needs)
      #
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${EXECUTABLE}-${VERSION}-Linux
          path: build/${EXECUTABLE}

  #
  # macOS build
  #
  build-mac:
    runs-on: macos-latest
    steps:
      #
      # Checkout the repository
      #
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      #
      # Install Qt
      #
      - name: Install Qt
        uses: jurplel/install-qt-action@v2

      #
      # Install CMake
      #
      - name: Install CMake
        run: |
          brew install cmake

      #
      # Configure and build using CMake (using Makefiles)
      #
      - name: Configure and build
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j$(sysctl -n hw.logicalcpu)

      #
      # Deploy application (adjust as per your deployment steps)
      #
      - name: Deploy app
        run: |
          macdeployqt ${EXECUTABLE}.app -qmldir="${QML_DIR_NIX}"
          mv ${EXECUTABLE}.app ${APPLICATION}.app

      #
      # Create ZIP file for distribution
      #
      - name: Create ZIP file
        run: |
          ditto -c -k --sequesterRsrc --keepParent ${APPLICATION}.app ${EXECUTABLE}-${VERSION}-macOS.zip

      #
      # Upload ZIP to build artifacts
      #
      - name: Upload ZIP
        uses: actions/upload-artifact@v2
        with:
          name: ${EXECUTABLE}-${VERSION}-macOS.zip
          path: ${EXECUTABLE}-${VERSION}-macOS.zip

  #
  # Windows build
  #
  build-windows:
    runs-on: windows-latest
    steps:
      #
      # Checkout the repository
      #
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      #
      # Install Chocolatey
      #
      - name: Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

      #
      # Install cmake and ninja using Chocolatey
      #
      - name: Install cmake and ninja
        run: |
          choco install -y cmake ninja

      #
      # Install Qt
      #
      - name: Install Qt
        uses: jurplel/install-qt-action@v2

      #
      # Configure and build using CMake (using Ninja)
      #
      - name: Configure and build
        run: |
          mkdir buildwindows
          cd buildwindows
          cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release ..
          ninja

      #
      # Package application (if necessary for your project)
      #

      #
      # Upload artifacts (adjust as per your project's needs)
      #
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${EXECUTABLE}-${VERSION}-Windows
          path: build/${EXECUTABLE}.exe
